{"version":3,"file":"static/js/361.4ded2934.chunk.js","mappings":"sMACA,GAAgB,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,0B,mBCahL,EATmB,SAACA,GAChB,IAAIC,EAAO,YAAcD,EAAME,GAC/B,OACI,gBAAKC,UAAWC,EAAAA,OAAW,IAAMA,EAAAA,OAAS,UACtC,SAAC,KAAO,CAACC,GAAIJ,EAAK,SAAED,EAAMM,QAGtC,ECDA,EAPgB,SAACN,GACb,OACI,gBAAKG,UAAWC,EAAAA,QAAU,SAAEJ,EAAMO,SAE1C,E,UCPA,EAAwB,8BAAxB,EAAiE,iC,oBCMjE,EALgCC,EAAAA,KAAaC,MAAM,CAC/CC,eAAgBF,EAAAA,KACXG,IAAI,GAAI,+CACRC,SAAS,cC2BlB,EA3BuB,SAACZ,GACpB,OAAQ,0BAEJ,SAAC,KAAM,CACHa,cAAe,CACXH,eAAgB,IAEpBI,SAAU,SAACC,GACPf,EAAMgB,YAAYD,EAAOL,eAC7B,EACAO,iBAAkBC,EAAwB,SAEzC,gBAAGC,EAAY,EAAZA,aAAcC,EAAM,EAANA,OAAQC,EAAO,EAAPA,QAAO,OAC7B,UAAC,KAAI,CAACP,SAAUK,EAAa,WACzB,0BACI,SAAC,KAAK,CAACG,GAAG,WAAWhB,KAAM,iBAAkBiB,YAAY,kBACrDpB,UAAWiB,EAAOV,gBAAkBW,EAAQX,eAAc,UAAMN,GAAY,QAEpF,SAAC,KAAY,CAACE,KAAK,iBAAiBkB,UAAU,MAAMrB,UAAWC,KAC/D,mBAAQqB,KAAM,SAAS,SAAC,WACrB,KAKvB,ECGA,EA1BgB,SAACzB,GAEb,IAAI0B,EAAQ1B,EAAM2B,YAEdC,EAAkBF,EAAMG,QAAQC,KAAI,SAAAC,GAAC,OAAI,SAAC,EAAU,CAACzB,KAAMyB,EAAEzB,KAAiBJ,GAAI6B,EAAE7B,IAAZ6B,EAAE7B,GAAgB,IAE1F8B,EAAkBN,EAAMO,SAASH,KAAI,SAAAI,GAAC,OAAI,SAAC,EAAO,CAAC3B,QAAS2B,EAAE3B,SAAc2B,EAAEhC,GAAM,IAExF,OAAKF,EAAMmC,QAGP,iBAAKhC,UAAWC,EAAAA,QAAU,WAEtB,gBAAKD,UAAWC,EAAAA,aAAe,SAC1BwB,KAEL,gBAAKzB,UAAWC,EAAAA,SAAW,UACvB,yBAAM4B,OAGV,SAAC,EAAc,CAAChB,YAAahB,EAAMgB,kBAZjB,SAAC,KAAQ,CAACX,GAAG,UAgB3C,E,iDC3BI+B,EAA6B,SAACV,GAAK,MAAM,CACzCS,OAAQT,EAAMW,KAAKF,OACtB,ECcD,GAAeG,E,QAAAA,KACXC,EAAAA,EAAAA,KAfkB,SAACb,GACnB,MAAO,CACHC,YAAaD,EAAMC,YAE3B,IAEyB,SAACa,GACtB,MAAO,CACHxB,YAAa,SAACN,GACV8B,GAASC,EAAAA,EAAAA,GAAmB/B,GAChC,EAER,KDVgC,SAACgC,GAAe,IACtCC,EAAiB,qGAIlB,OAJkB,8BACnB,WACI,OAAKC,KAAK5C,MAAMmC,QACT,SAACO,GAAS,UAAKE,KAAK5C,SADI,SAAC,KAAQ,CAACK,GAAG,UAEhD,KAAC,EAJkB,CAASwC,EAAAA,WAOhC,OADsCN,EAAAA,EAAAA,IAAQH,EAARG,CAAoCI,EAE9E,GCGA,CAGEG,E","sources":["webpack://react-kamasutra/./src/Components/Dialogs/Dialogs.module.css?db5c","Components/Dialogs/DialogItem/DialogItem.jsx","Components/Dialogs/Message/Message.jsx","webpack://react-kamasutra/./src/Components/Dialogs/DialogForm/AddMessageForm.module.css?f034","utils/validators/AddNewMessageFormShema.js","Components/Dialogs/DialogForm/AddMessageForm.jsx","Components/Dialogs/Dialogs.jsx","hoc/withAuthRedirect.js","Components/Dialogs/DialogsContainer.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__stmnZ\",\"dialogsItems\":\"Dialogs_dialogsItems__8GTUZ\",\"active\":\"Dialogs_active__-i6R3\",\"messages\":\"Dialogs_messages__5m9u1\",\"message\":\"Dialogs_message__l2VQC\"};","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport s from \"./../Dialogs.module.css\"\r\n\r\n\r\nconst DialogItem = (props) => {\r\n    let path = '/dialogs/' + props.id\r\n    return (\r\n        <div className={s.dialog + ' ' + s.active}>\r\n            <NavLink to={path}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem;","import React from \"react\";\r\nimport s from \"./../Dialogs.module.css\"\r\n\r\n\r\nconst Message = (props) => {\r\n    return(\r\n        <div className={s.message}>{props.message}</div>\r\n    )\r\n}\r\n\r\n\r\nexport default Message;","// extracted by mini-css-extract-plugin\nexport default {\"field\":\"AddMessageForm_field__L4OLs\",\"errorMes\":\"AddMessageForm_errorMes__vSZXB\"};","import * as Yup from \"yup\";\r\n\r\nconst addNewMessageFormSchema = Yup.object().shape({\r\n    newMessageBody: Yup.string()\r\n        .max(10, \"Nice try, nobody has a first name that long\")\r\n        .required(\"Required\")\r\n});\r\nexport default addNewMessageFormSchema;\r\n","import React from \"react\";\r\nimport s from \"./AddMessageForm.module.css\"\r\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\r\nimport addNewMessageFormSchema from \"../../../utils/validators/AddNewMessageFormShema\";\r\n\r\nconst AddMessageForm = (props) => {\r\n    return (<div>\r\n\r\n        <Formik\r\n            initialValues={{\r\n                newMessageBody: ''\r\n            }}\r\n            onSubmit={(values) => {\r\n                props.sendMessage(values.newMessageBody)\r\n            }}\r\n            validationSchema={addNewMessageFormSchema}\r\n        >\r\n            {({ handleSubmit, errors, touched }) => (\r\n                <Form onSubmit={handleSubmit}>\r\n                    <div>\r\n                        <Field as='textarea' name={'newMessageBody'} placeholder='Enter your post'\r\n                            className={errors.newMessageBody && touched.newMessageBody ? `${s.field}` : ''} />\r\n                    </div>\r\n                    <ErrorMessage name=\"newMessageBody\" component=\"div\" className={s.errorMes} />\r\n                    <button type={'submit'}>send</button>\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n\r\n    </div>)\r\n}\r\n\r\nexport default AddMessageForm;","import React from \"react\";\r\nimport s from \"./Dialogs.module.css\"\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport { Navigate } from \"react-router-dom\";\r\nimport AddMessageForm from \"./DialogForm/AddMessageForm\";\r\n\r\nconst Dialogs = (props) => {\r\n\r\n    let state = props.dialogsPage;\r\n\r\n    let dialogsElements = state.dialogs.map(d => <DialogItem name={d.name} key={d.id} id={d.id} />);\r\n\r\n    let messagesElement = state.messages.map(m => <Message message={m.message} key={m.id} />);\r\n\r\n    if (!props.isAuth) return <Navigate to=\"/login\" />;\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>{messagesElement}</div>\r\n            </div>\r\n\r\n            <AddMessageForm sendMessage={props.sendMessage} />\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialogs;","import React from 'react'\r\nimport { Navigate } from 'react-router-dom'\r\nimport { connect } from 'react-redux'\r\n\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if (!this.props.isAuth) return <Navigate to=\"/login\" />\r\n            return <Component {...this.props} />\r\n        }\r\n    }\r\n    let  ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n    return ConnectedAuthRedirectComponent;\r\n}","import { connect } from \"react-redux\";\r\nimport { sendMessageCreator } from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect\";\r\nimport { compose } from \"redux\";\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        sendMessage: (newMessageBody) => {\r\n            dispatch(sendMessageCreator(newMessageBody))\r\n        },\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs);"],"names":["props","path","id","className","s","to","name","message","Yup","shape","newMessageBody","max","required","initialValues","onSubmit","values","sendMessage","validationSchema","addNewMessageFormSchema","handleSubmit","errors","touched","as","placeholder","component","type","state","dialogsPage","dialogsElements","dialogs","map","d","messagesElement","messages","m","isAuth","mapStateToPropsForRedirect","auth","compose","connect","dispatch","sendMessageCreator","Component","RedirectComponent","this","React","Dialogs"],"sourceRoot":""}